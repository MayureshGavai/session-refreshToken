<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
        rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <title>Document</title>
    <style>
        * {
            font-family: "Roboto", sans-serif;
        }
    </style>
    <title>Home</title>
</head>
<body>
    <div class="row m-3">
        <div class="col-12 d-flex justify-content-end">
            <button onclick="logoutUser()" class="btn text-white" style="font-size: 14px; background-color: rgb(202, 37, 37);">Logout</button>
        </div>
    </div>
    <div class="container">
        <h1 class="mt-4 fs-4">Home Page</h1>
        <div class="d-flex justify-content-center align-items-center">
            <button onclick="fetchData()" class="mx-auto w-fit btn text-white" style="background-color: black;">Call Api</button>
        </div>
    </div>
    <script>

        const getCookie = (name) => {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }


        const logoutUser = async () => {
            try {
                const response = await fetch('/signout', {
                    method: 'GET',
                    credentials: 'same-origin' // This ensures cookies are included in the request
                });
                console.log(response)
                if (response.redirected) {
                    window.location.href = response.url;
                } else {
                    console.error('Logout failed');
                }
            } catch (error) {
                console.error('Error during logout:', error);
            }
        }

        const fetchData = async () => {
            try {
                const accessToken = getCookie('accessToken')

                const response = await fetch('/data', {
                    method: 'GET',
                    credentials: 'same-origin',
                    headers : {
                        'Authorization' : `Bearer ${accessToken}`
                    }
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Error fetching data');
                }
                if(response.redirected){
                    alert('Session is invalid or has expired')
                    window.location.href = response.url
                }else{
                    const data = await response.json();
                    alert(data.message);
                }
            } catch (error) {
                console.error('Error during fetchData:', error);
                alert(`Fetch data failed: ${error.message}`);
            }
        };

    </script>
</body>
</html>